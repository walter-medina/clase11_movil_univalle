apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.10"
}

project.afterEvaluate {
    setupAndroidReporting()
}

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']       //This line
            }
        }
        unitTests.returnDefaultValues = true
    }
}

def setupAndroidReporting() {
    def testTaskName = "testDebugUnitTest"
    def taskName = "jacocoTestReport"
    def sourceName = "debug"

    tasks.create(name: taskName, type: JacocoReport, dependsOn: [testTaskName]) {
        group = "Reporting ${sourceName.capitalize()}"
        reports {
            xml {
                enabled true
            }
            html {
                enabled true
            }
        }
        println("taskName: ${taskName}")
        //region filter
        def fileFilter = [
                '**/di/**',
                '**/view/**',
                '**/data/**',
                '**/model/**',
                '**/utils/**',
                '**/webservice/**',
                '**/databinding/**',
                '**/hilt_aggregated_deps*',
                '**/DataBinderMapperImpl*',
                '**/AppExample*',
                '**/DataBindingTriggerClass*',
                '**/BR*',
                '**/DataBinderMapperImpl.InnerLayoutIdLookup*',
                'dagger/hilt/internal/aggregatedroot/codegen/**'
                //endregion
        ]
        //endregion

        def javaTree = fileTree(dir:"$buildDir/intermediates/javac/$sourceName/classes", excludes: fileFilter)
        def kotlinTree = fileTree(dir:"$buildDir/tmp/kotlin-classes/$sourceName", excludes: fileFilter)

        def coverageSourceDir = [
                "src/main/java"
        ]

        classDirectories.from = files([javaTree], [kotlinTree])
        sourceDirectories.from = files(coverageSourceDir)

        executionData.from = files("$buildDir/jacoco/${testTaskName}.exec")
    }
}
